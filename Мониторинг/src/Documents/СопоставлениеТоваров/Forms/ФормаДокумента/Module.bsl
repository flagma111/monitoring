
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ДеревоВ_ТЧ(ТекущийОбъект);
	ХранилищеНастроекОтбора = Новый ХранилищеЗначения(Отбор.ПолучитьНастройки());
	ТекущийОбъект.ОтборХранилище = ХранилищеНастроекОтбора;
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	ТЧ_В_ДеревоНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДеревоВ_ТЧ(ТекущийОбъект)

	ДеревоЗначенийИзТЧ = РеквизитФормыВЗначение("ДеревоИНТ");
	Для Каждого СтрУр1 Из ДеревоЗначенийИзТЧ.Строки Цикл 
		Номенклатура = СтрУр1.НоменклатураКонкурент;
		Для Каждого СтрУр2 Из СтрУр1.Строки Цикл
			Если ЗначениеЗаполнено(СтрУр2.НомерСтрокиТЧ) Тогда 
				СтрокаТЧ = ТекущийОбъект.Сопоставление[СтрУр2.НомерСтрокиТЧ-1];
				
			Иначе 
				СтрокаТЧ = ТекущийОбъект.Сопоставление.Добавить();
				СтрокаТЧ.Номенклатура = Номенклатура;
				СтрокаТЧ.Конкурент = СтрУр2.НоменклатураКонкурент;
				СтрокаТЧ.Исполнитель = СтрУр2.КодИсполнитель;
				СтрокаТЧ.ЦенаКонкурента = СтрУр2.Цена;
				СтрокаТЧ.ДатаМониторинга = СтрУр2.ДатаМониторинга;
				СтрокаТЧ.ТипМониторинга = СтрУр2.ТипМониторинга;
			КонецЕсли;
			СтрокаТЧ.СопоставлениеКорректно = СтрУр2.СопоставлениеКорректно;
			СтрокаТЧ.Комментарий = СтрУр2.КатегорияКомментарий;
			СтрокаТЧ.ИменаКартинок = СтрУр2.ИменаКартинок;
			СтрокаТЧ.КомментарийКНоменклатуре = СтрУр2.КомментарийКНоменклатуре;
		КонецЦикла;
	КонецЦикла;
	
	ТекущийОбъект.Сопоставление.Сортировать("Номенклатура Возр");
	
КонецПроцедуры // ()


&НаСервере
Процедура ТЧ_В_ДеревоНаСервере()
	
	ДеревоЗначенийИзТЧ = РеквизитФормыВЗначение("ДеревоИНТ");
	ДеревоЗначенийИзТЧ.Строки.Очистить();
	Если НЕ Объект.Сопоставление.Количество() Тогда 
		Возврат;
	КонецЕсли;
	текТовар = Неопределено;
	ТаблицаЦенаКатегория = ПолучитьТЗЦЕН(Объект.Сопоставление.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"));
	Для Каждого строкаТЧ Из Объект.Сопоставление Цикл 
		Если НЕ текТовар = строкаТЧ.Номенклатура Тогда 
			текТовар = строкаТЧ.Номенклатура;
			СтрУр1 = ДеревоЗначенийИзТЧ.Строки.Добавить();
			
			СтрУр1.Уровень = 1;
			СтрУр1.НоменклатураКонкурент = текТовар;
			СтрУр1.КодИсполнитель = текТовар.Код;
			СтрокаЦена = ТаблицаЦенаКатегория.Найти(текТовар, "Номенклатура");
			Если НЕ СтрокаЦена = Неопределено Тогда 
				СтрУр1.Цена = СтрокаЦена.Цена;
				СтрУр1.КатегорияКомментарий = СтрокаЦена.КатегорияНоменклатуры;
			КонецЕсли;
		КонецЕсли;
		СтрУр2 = СтрУр1.Строки.Добавить();
		СтрУр2.НоменклатураКонкурент = строкаТЧ.Конкурент;
		СтрУр2.КодИсполнитель = строкаТЧ.Исполнитель;
		СтрУр2.СопоставлениеКорректно = строкаТЧ.СопоставлениеКорректно;
		СтрУр2.Цена = строкаТЧ.ЦенаКонкурента;
		СтрУр2.НомерСтрокиТЧ = строкаТЧ.НомерСтроки;
		СтрУр2.КатегорияКомментарий = строкаТЧ.Комментарий;
		СтрУр2.ИменаКартинок =строкаТЧ.ИменаКартинок;
		СтрУр2.Уровень = 2;
		СтрУр2.ДатаМониторинга = строкаТЧ.ДатаМониторинга;
		СтрУр2.ТипМониторинга = строкаТЧ.ТипМониторинга;
		СтрУр2.КомментарийКНоменклатуре = строкаТЧ.КомментарийКНоменклатуре;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДеревоЗначенийИзТЧ,"ДеревоИНТ");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТЗЦЕН(МассивНоменклатуры)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.КатегорияНоменклатуры КАК КатегорияНоменклатуры,
		|	СУММА(1) КАК КоличествоПовторений
		|ПОМЕСТИТЬ ВТ_Категории
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (&МассивНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.КатегорияНоменклатуры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Категории.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ВТ_Категории.КоличествоПовторений) КАК КоличествоПовторений
		|ПОМЕСТИТЬ ВТ_МаксимальныеКатегории
		|ИЗ
		|	ВТ_Категории КАК ВТ_Категории
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Категории.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Категории.Номенклатура КАК Номенклатура,
		|	МИНИМУМ(ВТ_Категории.КатегорияНоменклатуры) КАК КатегорияНоменклатуры
		|ПОМЕСТИТЬ ВТ_НомКатегории
		|ИЗ
		|	ВТ_Категории КАК ВТ_Категории
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксимальныеКатегории КАК ВТ_МаксимальныеКатегории
		|		ПО ВТ_Категории.Номенклатура = ВТ_МаксимальныеКатегории.Номенклатура
		|			И ВТ_Категории.КоличествоПовторений = ВТ_МаксимальныеКатегории.КоличествоПовторений
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Категории.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Категории
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_МаксимальныеКатегории
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СРЕДНЕЕ(ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВТ_СредняяЦена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (&МассивНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СредняяЦена.Номенклатура КАК Номенклатура,
		|	ВТ_СредняяЦена.Цена КАК Цена,
		|	ВТ_НомКатегории.КатегорияНоменклатуры КАК КатегорияНоменклатуры
		|ИЗ
		|	ВТ_СредняяЦена КАК ВТ_СредняяЦена
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НомКатегории КАК ВТ_НомКатегории
		|		ПО ВТ_СредняяЦена.Номенклатура = ВТ_НомКатегории.Номенклатура";
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	
	ТЗ_Результат = Запрос.Выполнить().Выгрузить();
	ТЗ_Результат.Индексы.Добавить("Номенклатура");
	
	Возврат ТЗ_Результат;

КонецФункции // ПолучитьТЗЦЕН()


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ТЧ_В_ДеревоНаСервере();

	ОО = РеквизитФормыВЗначение("Объект"); 	СКД = ОО.ПолучитьМакет("Макет");
	URLСКД = ПоместитьВоВременноеХранилище(СКД, Новый УникальныйИдентификатор());
	Отбор.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСКД));
	НастройкиПоУмолчанию = СКД.НастройкиПоУмолчанию;
	Отбор.ЗагрузитьНастройки(НастройкиПоУмолчанию);
	СохраненныеНастройки = ОО.ОтборХранилище.Получить();
	Если НЕ СохраненныеНастройки = Неопределено Тогда 
		Отбор.ЗагрузитьНастройки(СохраненныеНастройки);
	КонецЕсли;
	ПутьККаталогуКартинок = Константы.ПутьККаталогуКартинок.Получить();
	КаталогФото = Константы.КаталогФото.Получить();
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Объект.Ответственный = ОбщегоНазначения.ТекущийПользователь();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИНТВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Поле.Имя = "ДеревоИНТКомментарий" Тогда	
		ТекСтрока = Элементы.ДеревоИНТ.ТекущиеДанные;
		Если ТекСтрока.Уровень = 2 Тогда 
			ПоказатьВводЗначения(Новый ОписаниеОповещения("ВводКомментария", ЭтаФорма, Новый Структура),ТекСтрока.КатегорияКомментарий, "Введите комментарий:",тип("СправочникСсылка.ШаблоныКомментариев")); //Ден  2017 11 30 ---
		КонецЕсли;	
	ИначеЕсли Поле.Имя = "ДеревоИНТСопоставлениеКорректно" Тогда 
		Флажок("");
	Иначе
		ТекСтрока = Элементы.ДеревоИНТ.ТекущиеДанные;
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено,ТекСтрока[стрзаменить(Поле.Имя, "ДеревоИНТ","")]);
	КонецЕсли; 		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИНТПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элемент.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Если ТекСтрока.Уровень = 1 Тогда 
		ТекНоменклатура = ТекСтрока.НоменклатураКонкурент;
	Иначе 
		ТекНоменклатура = ТекСтрока.получитьродителя().НоменклатураКонкурент;
	КонецЕсли;
	
	СтрокаКартинка = ПолучитьСсылкаНаФотоНоменклатуры(ТекНоменклатура, КаталогФото);
	Если ЗначениеЗаполнено(СтрокаКартинка) Тогда 
		Фото1 = "<html>
				|<body> <div align = center>
				|<img height = 100% src='"+СтрокаКартинка+"'/></div>
				|</body>
				|</html>";
	Иначе
		Фото1 = "";		
	КонецЕсли;
	
	СтрокиИменКартинок = СтрЗаменить(ТекСтрока.ИменаКартинок, ",", Символы.ПС);
	
	ЧислоКартинок = СтрЧислоСтрок(СтрокиИменКартинок);
	Для н = 1 По 3 Цикл 
		Если н > ЧислоКартинок Тогда 
			СсылкаНаФото = "";
		Иначе 
			СтрокаКартинка = СтрПолучитьСтроку(СтрокиИменКартинок, н);
			Если ЗначениеЗаполнено(СтрокаКартинка) Тогда
				Если Не СтрНайти(СтрокаКартинка, "http://") = 0 Тогда
					СтрокаКартинка = СтрокаКартинка;
				Иначе
					СтрокаКартинка = ПутьККаталогуКартинок + СтрокаКартинка;
				КонецЕсли;
				СсылкаНаФото = "<html>
					|<body> <div align = center>
					|<img height = 100% src='"+СтрокаКартинка+"'/></div>
					|</body>
					|</html>";
			КонецЕсли;

		КонецЕсли;
		
		Выполнить("Фото" + (н+1) + " = СсылкаНаФото;");
			
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСсылкаНаФотоНоменклатуры(Номенклатура, КаталогФото)

	Фото = КаталогФото + Номенклатура.Фотография + ".jpg";
	Возврат Фото;

КонецФункции // ПолучитьСсылкаНаФотоНоменклатуры(()

&НаКлиенте
Процедура Фото1ПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	ОткрытьФото(Фото1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФото(СсылкаНаФото, Наше = Ложь)

	ТекСтрока = Элементы.ДеревоИНТ.ТекущиеДанные;
	СтрокаКонкурент = "";
	Описание = ПоулчитьОписаниеНоменклатуры(ТекНоменклатура);

	Если НЕ Наше И НЕ ТекСтрока = Неопределено Тогда 
		Если ТипЗнч(ТекСтрока.НоменклатураКонкурент) = Тип("СправочникСсылка.Конкуренты") Тогда 
			СтрокаКонкурент = СокрЛП(ТекСтрока.НоменклатураКонкурент);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.КомментарийКНоменклатуре) Тогда 
			СтрокаКонкурент = СтрокаКонкурент + Символы.ПС + ТекСтрока.КомментарийКНоменклатуре;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Описание) Тогда 
		СтрокаКонкурент = Описание + Символы.ПС + СтрокаКонкурент;
	КонецЕсли;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Заголовок",""+ТекНоменклатура + Символы.ПС + СтрокаКонкурент); 
	СтруктураПараметров.Вставить("АдресКартинки", СсылкаНаФото);
	СтруктураПараметров.Вставить("ЭтоСсылка", Истина);
	СтруктураПараметров.Вставить("ЗаголовокФормы", "Просмотр фото");
	ОткрытьФорму("ОбщаяФорма.ФормаПросмотраКартинок",Новый Структура("СтрутураПараметров",СтруктураПараметров));

КонецПроцедуры // ОткрытьФото()

&НаСервереБезКонтекста
Функция ПоулчитьОписаниеНоменклатуры(ТекНоменклатура)

	Возврат ТекНоменклатура.Описание;

КонецФункции // ПоулчитьОписаниеНоменклатуры(ТекНоменклатура)()

&НаКлиенте
Процедура Фото2ПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	ОткрытьФото(Фото2);
КонецПроцедуры

&НаКлиенте
Процедура Фото3ПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	ОткрытьФото(Фото3);
КонецПроцедуры

&НаКлиенте
Процедура Фото4ПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	ОткрытьФото(Фото4);
КонецПроцедуры

&НаКлиенте
Процедура Флажок(Команда)
	Поле = Элементы.ДеревоИНТ.ТекущийЭлемент;
	Если Поле = Неопределено Или Поле.Имя = "ДеревоИНТКомментарий" Тогда 
		Возврат;
	КонецЕсли;
	ТекСтрока = Элементы.ДеревоИНТ.ТекущиеДанные;
	Если ТекСтрока.Уровень =  1 Тогда 
		Возврат;
	КонецЕсли;
	Если ТекСтрока.СопоставлениеКорректно = 0 Тогда 
		ТекСтрока.СопоставлениеКорректно = 2;
	ИначеЕсли ТекСтрока.СопоставлениеКорректно = 1 Тогда 
		ПоказатьВводЗначения(Новый ОписаниеОповещения("ВводКомментария", ЭтаФорма, Новый Структура),ТекСтрока.КатегорияКомментарий, "Введите комментарий:",тип("СправочникСсылка.ШаблоныКомментариев"));//Ден  2017 11 30 ---
	ИначеЕсли ТекСтрока.СопоставлениеКорректно = 2 Тогда 
		ТекСтрока.СопоставлениеКорректно = 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВводКомментария(Результат = Неопределено, ДопПараметры = Неопределено) Экспорт 
	Если НЕ Результат = Неопределено Тогда 
		ТекСтрока = Элементы.ДеревоИНТ.ТекущиеДанные;
		Если НЕ ТекСтрока = Неопределено Тогда 
			ТекСтрока.КатегорияКомментарий = Результат;
			ТолькоКомментарий = Ложь;
			Если ДопПараметры.Свойство("ТолькоКомментарий", ТолькоКомментарий) И ТолькоКомментарий Тогда 
				Возврат;
			КонецЕсли;
			ТекСтрока.СопоставлениеКорректно = 0;
			СтрокиВыведенных = ТекСтрока.ПолучитьРодителя().ПолучитьЭлементы();
			//Соберем массив уже выведенных конкурентов и магазинов
			ТекМагазин = ТекСтрока.КодИсполнитель;
			МассивКонкурентовНеВыводить = Новый Массив;
			МассивМагазиновНеВыводить = Новый Массив;
			Для Каждого СтрокДЗ Из СтрокиВыведенных Цикл 
				Если НЕ СтрокДЗ.СопоставлениеКорректно = 0 Тогда 
					МассивМагазиновНеВыводить.Добавить(СтрокДЗ.КодИсполнитель);
				КонецЕсли;
				МассивКонкурентовНеВыводить.Добавить(СтрокДЗ.НоменклатураКонкурент);
			КонецЦикла;
			МассивСтуктурНоваяСтрока = ДоабвитьСтрокуВТЧ(МассивМагазиновНеВыводить, МассивКонкурентовНеВыводить, ТекМагазин);
			Для Каждого СтуктураНоваяСтрока Из МассивСтуктурНоваяСтрока Цикл 
				НоваяСтрока = СтрокиВыведенных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтуктураНоваяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВводКомментария()

&НаСервере
Функция ДоабвитьСтрокуВТЧ(МассивМагазиновНеВыводить, МассивКонкурентовНеВыводить, ТекМагазин)
	
	СКД = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	//Запускаем компоновку
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	НастройкиСкд = Отбор.ПолучитьНастройки();
	//Установим отбор номенклатура = текноменклатура
	НастройкиСкд.Отбор.Элементы[3].Использование = Истина;
	НастройкиСкд.Отбор.Элементы[3].ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НастройкиСкд.Отбор.Элементы[3].ПравоеЗначение = ТекНоменклатура;
	
	НастройкиСкд.Отбор.Элементы[0].Использование = Истина;
	НастройкиСкд.Отбор.Элементы[0].ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НастройкиСкд.Отбор.Элементы[0].ПравоеЗначение = ТекМагазин.Город;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиСкд,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	//Создаем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	//Выводим в таблицу значений
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТЗ = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	ТЗ.Сортировать("ЦенаКонкурента Возр");
	Сч = 0;
	МассивСтуктурВозврат = Новый Массив;
	Для Каждого СтрокаТЗ Из ТЗ Цикл 
		//1. Провери что магазин и конкурента еще не выводили
		Если НЕ МассивМагазиновНеВыводить.Найти(СтрокаТЗ.Исполнитель) = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		Если НЕ МассивКонкурентовНеВыводить.Найти(СтрокаТЗ.Конкурент) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Сч = 0 Тогда
			Сч = 1;
		Иначе
			Продолжить;
		КонецЕсли;
		
		МассивМагазиновНеВыводить.Добавить(СтрокаТЗ.Исполнитель);
		МассивКонкурентовНеВыводить.Добавить(СтрокаТЗ.Конкурент);
		СтрокаТЧ = Объект.Сопоставление.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЗ);
		
		СтрУр2 = Новый Структура;
		СтрУр2.Вставить("НоменклатураКонкурент", строкаТЧ.Конкурент);
		СтрУр2.Вставить("КодИсполнитель", строкаТЧ.Исполнитель);
		СтрУр2.Вставить("СопоставлениеКорректно", строкаТЧ.СопоставлениеКорректно);
		СтрУр2.Вставить("Цена", строкаТЧ.ЦенаКонкурента);
		СтрУр2.Вставить("НомерСтрокиТЧ", строкаТЧ.НомерСтроки);
		СтрУр2.Вставить("ИменаКартинок", строкаТЧ.ИменаКартинок);
		СтрУр2.Вставить("Уровень",2);
		СтрУр2.Вставить("ДатаМониторинга", строкаТЧ.ДатаМониторинга);
		СтрУр2.Вставить("ТипМониторинга", строкаТЧ.ТипМониторинга);

		МассивСтуктурВозврат.Добавить(СтрУр2);
	КонецЦикла;

	Возврат МассивСтуктурВозврат;
	
КонецФункции // ()

&НаСервере
Процедура ЗаполнитьТЧНаСервере()
	СКД = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	Объект.Сопоставление.Очистить();
	Объект.ТЧ_РезультатОтбора.Очистить();
	//Запускаем компоновку
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	НастройкиОтбора = Отбор.ПолучитьНастройки();
	ЭлементыОтбора = НастройкиОтбора.Отбор.Элементы;
	//Получим и добавим отбор пользователя
	ТекущийПользователь = ОбщегоНазначения.ТекущийПользователь();
	ОтборПользователя = ТекущийПользователь.ОтборХранилище.Получить();
	Если НЕ ОтборПользователя = Неопределено Тогда 
		ЭлементыОтбораПользователя = ОтборПользователя.Отбор.Элементы;
		Для Каждого ЭлементОтбораПользователя Из ЭлементыОтбораПользователя Цикл 
			элементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(элементОтбора, ЭлементОтбораПользователя);
		КонецЦикла;
	КонецЕсли;

	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиОтбора,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	//Создаем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	//Выводим в таблицу значений
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТЗ = ПроцессорВывода.Вывести(ПроцессорКомпоновки, истина);
	
	ТекМагазин = Неопределено;
	ТекНом = Неопределено;
	
	Для Каждого СтрокаТЗ Из ТЗ Цикл
		СтрокаТЧОтбор = Объект.ТЧ_РезультатОтбора.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧОтбор,СтрокаТЗ);
		Если ТекНом <> СтрокаТЗ.Номенклатура Тогда 
			ТекМагазин = СтрокаТЗ.Исполнитель;
			ТекНом = СтрокаТЗ.Номенклатура;
			МассивКонкурентов = Новый Массив;//по каждой номенклатуре ищем только конкурента в одном варианте, если конкурент на несколько магазинов, то оставляем один раз
			
		ИначеЕсли ТекМагазин <> СтрокаТЗ.Исполнитель Тогда 
			ТекМагазин = СтрокаТЗ.Исполнитель;
		Иначе 
			//этот магазин уже есть
			Продолжить;
		КонецЕсли;
		Если НЕ МассивКонкурентов.Найти(СтрокаТЗ.Конкурент) = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		МассивКонкурентов.Добавить(СтрокаТЗ.Конкурент);
		СтрокаТЧ = Объект.Сопоставление.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТЗ);
	КонецЦикла;
	
	Объект.Сопоставление.Сортировать("Номенклатура Возр");

	
	ТЧ_В_ДеревоНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧ(Команда)
	//Ден  2017 11 30 ---
	Если объект.Сопоставление.Количество() Тогда
		ТекстВопроса = "При перезаполнении все текущие данные будут потеряны, продолжить?";
		ПоказатьВопрос(новый ОписаниеОповещения("ПослеВопросаОЗаполнении", ЭтотОбъект),ТекстВопроса,РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ПослеВопросаОЗаполнении();	
	КонецЕсли;
	//---
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОЗаполнении(Результат = Истина,Параметры = Неопределено) Экспорт//Ден  2017 11 30 ---
	Если Результат = КодВозвратаДиалога.ОК или Результат = Истина Тогда
		Объект.Сопоставление.Очистить();
		ДеревоИНТ.ПолучитьЭлементы().Очистить();
		ЗаполнитьТЧНаСервере();
		РазвернутьДерево();	
	КонецЕсли;
КонецПроцедуры//

&НаКлиенте
Процедура ПроверитьРезультат(Команда)
	ТМПТекСтрока = Элементы.ДеревоИНТ.ТекущиеДанные;
	//Сначала проверим текущую ветку
	Если ТМПТекСтрока = Неопределено Тогда 
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПроверкаЗакончена", ЭтаФорма, Новый Структура("Записать", Истина)), "Все товары сопоставлены!");
		Возврат;
	КонецЕсли;
	Если ТМПТекСтрока.Уровень = 2 Тогда 
		Родитель = ТМПТекСтрока.ПолучитьРодителя();
	Иначе 
		Родитель = ТМПТекСтрока;
	КонецЕсли;
	//Если в текущей ветке все ок, то переходим к следующей
	КоллекцияЭлементовДерева = ДеревоИНТ.ПолучитьЭлементы();
	ИндексРодителя = КоллекцияЭлементовДерева.Индекс(Родитель);
	Для НомерСтроки = 0 По КоллекцияЭлементовДерева.Количество()-1 Цикл 
		НомерТекущейВетки = НомерСтроки + ИндексРодителя; 
		Если НомерТекущейВетки > КоллекцияЭлементовДерева.Количество()-1 Тогда 
			НомерТекущейВетки = НомерСтроки + ИндексРодителя - КоллекцияЭлементовДерева.Количество();
		КонецЕсли;
		СтрокиТекущейВетки = КоллекцияЭлементовДерева[НомерТекущейВетки].ПолучитьЭлементы();
		Для Каждого СтрокаВетки Из СтрокиТекущейВетки Цикл 
			
			Если СтрокаВетки.СопоставлениеКорректно = 2 Тогда
				ИдентификаторСтроки = СтрокаВетки.ПолучитьИдентификатор();
				Элементы.ДеревоИНТ.ТекущаяСтрока = ИдентификаторСтроки;
				ПоказатьПредупреждение(Новый ОписаниеОповещения("ПроверкаЗакончена", ЭтаФорма, Новый Структура("Записать", Ложь)), "Строка не сопоставлена!");
				Возврат;
			ИначеЕсли (СтрокаВетки.СопоставлениеКорректно = 0 И СтрокаВетки.КатегорияКомментарий = "") Тогда 
				ИдентификаторСтроки = СтрокаВетки.ПолучитьИдентификатор();
				Элементы.ДеревоИНТ.ТекущаяСтрока = ИдентификаторСтроки;
				ПоказатьПредупреждение(Новый ОписаниеОповещения("ПроверкаЗакончена", ЭтаФорма, Новый Структура("Записать", Ложь)), "Не заполнен комментарий!");
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ПоказатьПредупреждение(Новый ОписаниеОповещения("ПроверкаЗакончена", ЭтаФорма, Новый Структура("Записать", Истина)), "Все товары сопоставлены!");
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗакончена(ДополнительныеПараметры) Экспорт 

	Записывать = Ложь;
	
	Если ДополнительныеПараметры.Свойство("Записать", Записывать) И Записывать Тогда 
		ЭтаФорма.Записать();
	КонецЕсли;
	
КонецПроцедуры // ПроверкаЗакончена()


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	РазвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево()
	КоллекцияЭлементовДерева = ДеревоИНТ.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Элементы.ДеревоИНТ.Развернуть(ИдентификаторСтроки);
	КонецЦикла;
КонецПроцедуры // ()

&НаСервере
Процедура ВсеСопоставитьНаСервере()
	Для Каждого Стр Из Объект.Сопоставление Цикл
		Стр.СопоставлениеКорректно = 1;
	КонецЦикла;	
	ТЧ_В_ДеревоНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВсеСопоставить(Команда)
	ВсеСопоставитьНаСервере();
	РазвернутьДерево();
КонецПроцедуры

&НаСервере
Процедура ВсеСнятьНаСервере()
	Для Каждого Стр Из Объект.Сопоставление Цикл
		Стр.СопоставлениеКорректно = 0;
	КонецЦикла;
	ТЧ_В_ДеревоНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВсеСнять(Команда)
	ВсеСнятьНаСервере();
	РазвернутьДерево();
КонецПроцедуры

